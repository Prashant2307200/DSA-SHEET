INTUITION :

    + or .append() 
    .clear()    
    .compare() or - 
    .empty() 
    .erase(idx,ersch)  
    str.find(subStr) 
    .insert(idx,str) 
    .size() or .length() 
    .substr(idx,ch) 
    .stoi() 
    .to_string() 
    .toUpper() +32 +'a'-'A' 'A'|(1<<5)    'a'|' ' 'a'^' '
    .toLower() -32 +'A'-'a' 'a'& ~(1<<5)  'A'&'_' 'A'^' '
    .isAlnum() 
    .isAlpha() 
    .isNumber()
    transform(s.begin(), s.end(),s.begin(),::toupper/lower);
    sort(s.begin(), s.end(),greater<int>());

string defangIPaddr(string address) {
    int n = address.size();
    string ans;
    for(int i = 0; i < n; ++i){
        char ch = address[i];
        if(ch == '.'){
            ans += "[.]";
        }else{
            ans += ch;
        }
    }return ans;
}

bool isPalindrome(string s) {
   int start=0;
   int end=s.size()-1;
   while(start<=end){
       if(!isalnum(s[start])){start++; continue;}
       if(!isalnum(s[end])){end--;continue;}
       if(tolower(s[start])!=tolower(s[end]))return false;
       else{
           start++;
           end--;
       }
   }return true;
}

bool isAnagram(string s, string t) {
    sort(s.begin(), s.end());
    sort(t.begin(), t.end());
    return s == t;
}

bool isAnagram(string s, string t) {
    multiset<char> sm(s.begin(),s.end());
    multiset<char> tm(t.begin(),t.end());
    return sm == tm;
}

class Solution {

    private:
        int hsh[26] = {0};

    public:
        bool isAnagram(string s, string t) {
            int n = s.size();
            int m = t.size();
            if(n != m){
                return 0;
            }for(auto& ch : s){
                hsh[ch-'a']++;
            }for(auto& ch : t){
                hsh[ch-'a']--;
            }for(auto& freq : hsh){
                if(freq != 0){
                    return 0;
                }
            }return 1;
        }
};


bool isAnagram(string s, string t) {
    return is_permutation(s.begin(),s.end(),t.begin(),t.end());
} 

bool checkIfPangram(string sentence) {
    unordered_set<char> s(sentence.begin(),sentence.end());
    return (s.size() == 26);
}

bool checkIfPangram(string sentence) {
    int mask = 0;
    int n = sentence.size();
    for(int i = 0; i < n; ++i){
        int idx = sentence[i] - 'a';
        if(((mask>>idx)&1) == 0){
            mask |= (1<<idx);
        }
}return (mask == ((1<<26)-1)); 

void word(string s){
    int n = s.size(); 
    string ans;
    for(int i = 0; i < n; ++i){
        string word;
        while(i < n && s[i] != ' '){
            word += s[i++];
        }
        cout << word << endl;
    }
}

pair<int,int> longestWord(string s){
    int n = s.size();
    int st = 0 ,len = 0 ,maxSt = 0 ,maxLen = 0;
    for(int i = 0; i < n; ++i){
        char ch = s[i];
        if(ch == ' '){
            st = i+1;
            len = 0;
        }
        else{
            len++;
            if(len > maxLen){
                maxLen = len;
                maxSt = st;
            }
        } 
    } 
    return {maxSt,maxLen};
}

string removeOccurrences(string s, string part) {
    while(s.find(part) != -1){
        s.erase(s.find(part),part.length());
    }
    return s;
}

string removeDuplicates(string s) {
    string ans = "";
    for(auto& ch : s){
        if(ans != "" && ans.back() == ch){
            ans.pop_back();
            continue;
        }
        ans += ch;
    }
    return ans;
}

string removeDuplicates(string s) {
    int n = s.size();
    for(int i = 0; i < n-1;){
        char ch = s[i];
        if(ch == s[i+1]){
            s.erase(i,2);
            i = max(0,i-1);
        }
        else{
            i++;
        }
    }
    return s;
}

int compress(vector<char>& chars) {
    int n = chars.size();
    int ansIdx = 0;
    for(int i = 0; i < n; ++i){
        char ch = chars[i];
        int st = i;
        while(i < n-1 && ch == chars[i+1])  i++;
        int en = i;
        int cnt = en-st+1;
        chars[ansIdx++] = ch;
        if(cnt > 1){
            string count = to_string(cnt);
            for(auto& ch : count)
                chars[ansIdx++] = ch;
        }
    }return ansIdx;
}

string countAndSay(int n) {
    if(n == 1)
        return "1";
    string say = countAndSay(n-1);
    int sz = say.size();
    string result = "";
    for(int i = 0; i < sz; ++i) {
        int count = 1;
        char ch = say[i];
        while(i < sz-1 && say[i] == say[i+1]) {
            count++;
            i++;
        }result += to_string(count) + string(1, say[i]);
    }return result;
} 

int longestPalindrome(string s) {
    vector<int> lower(26,0) ,upper(26,0);
    for(auto& ch : s){
        if(ch >= 'a' && ch <= 'z'){
            lower[ch-'a']++;
        }else{
            upper[ch-'A']++;
        }
    }bool flag =  0;
    int cnt = 0;
    for(int i = 0; i < 26; ++i){
        if(lower[i]/2 != 0){
            cnt += lower[i] - lower[i]%2;
        }if(upper[i]/2 != 0){
            cnt += upper[i] - upper[i]%2;
        }if((lower[i] % 2 || upper[i] % 2) && !flag){
            flag = 1;
        }
    }return (cnt + flag);
} 

class Solution {
    bool isPalindrome(string s){
        string rev = s;
        reverse(rev.begin(),rev.end());
        return s == rev;
    }
public:
    string longestPalindrome(string s) {
        int n = s.size() ,maxLen = 0;
        string ans;
        vector<string> substrs;
        for(int i = 0; i < n; ++i){
            string substr;
            for(int j = i; j < n; ++j){
                substr += s[j];
                substrs.push_back(substr);
            }
        }
        for(auto& substr : substrs){
            if(isPalindrome(substr)){
                int sz = substr.size();
                if(maxLen < sz){
                    ans = substr;
                    maxLen = substr.size();
                }
            }
        }
        return ans;
    }
};

string longestPalindrome(string s) {
    int n = s.size() ,len = 0 ,st = 0;
    vector<vector<bool>> dp(n,vector<bool> (n));
    for(int gap = 0; gap < n; ++gap){
        for(int i = 0 ,j = gap; j < n; ++j ,++i){
            if(gap == 0 || gap == 1 || dp[i+1][j-1]){
                dp[i][j] = !(s[i]-s[j]);
            }
            if(dp[i][j]){
                st = i;
                len = gap + 1;
            }
        }
    }
    return s.substr(st,len);
}

class Solution {
    void expand(string &s , int left ,int right){
        int n = s.size();
        while(left >= 0 &&  right < n){
            if(s[left] != s[right])
                break;
            left--,right++;
        }
        int len = right - left - 1;
        int maxLen = ans.size();
        if(maxLen < len )
            ans = s.substr(left + 1 ,len);
    }
public:
    string ans = "";
    string longestPalindrome(string s) {
        for(int i = 0 ; i < s.size() ; i++){
            expand(s , i , i);
            expand(s , i , i+1);
        }
        return ans;
    }
};

string sortVowels(string s) {
    vector<char> vowels;
    for (char c : s) {
        if (string("aeiouAEIOU").find(c) != -1) {
            vowels.push_back(c);
        }
    }sort(vowels.begin(), vowels.end(), greater<char>());
    string result;
    for (char c : s) {
        if (string("aeiouAEIOU").find(c) != string::npos) {
            result += vowels.back();
            vowels.pop_back();
        } else {
            result += c;
        }
    }return result;        
}

string sortSentence(string s) {
    string ans;
    int n = s.length();
    int words = 0;
    for(char &c : s){
        if(c == ' '){
            words++;
        }
    }words+=1;
    vector<string> v(words,"");
    int i = 0;
    while(i < n){
        string temp = "";
        while( i < n && !(s[i] >= '0' && s[i] <= '9') ){
            temp.push_back(s[i]);
            i++;
        }v[s[i] - '0' - 1] = temp;
        i+=2; 
    }for(auto x : v){
        ans = ans + x + " ";
    }ans.pop_back();
    return ans;      
} 

string reverseWords(string s) {
    int n = s.size();
    stack<string> st;
    for(int i = 0; i < n; ++i){
        char ch = s[i];
        if(ch == ' ')   continue;
        string word;
        for(;i < n && s[i] != ' '; ++i){
            word += s[i];
        }st.push(word);
    }
    s = "";
    while(!st.empty()){
        s += st.top();
        s += ' ';
        st.pop();
    }
    s.pop_back();
    return s;
} 

string reverseWords(string s) {
    int n = s.size();
    string res;
    for(int i = 0; i < n; ++i){
        char ch = s[i];
        if(ch == ' '){
            continue;
        }string word;
        for(;i < n && s[i] != ' '; ++i){
            word += s[i];
        }if(res.size() == 0){
            res += word;
        }else{
            res = word + ' ' + res;
        }
    }
    return res;
} 

string longestCommonPrefix(vector<string>& strs) {
    int n = strs.size();
    sort(strs.begin(),strs.end());
    string first_str = strs[0];
    string last_str = strs[n-1];
    int i = first_str.length();
    int j = last_str.length();
    int k = min(i,j);
    string ans = "";    
    for(int i = 0; i < k; ++i){
        if(first_str[i] != last_str[i]) break;
        ans += last_str[i];
    }return ans;
}

bool isIsomorphic(string s, string t) {
    int n = s.size();
    int m = t.size();
    unordered_map<char,char> hsh1,hsh2;
    if(n != m){
        return 0;
    }for(int i = 0; i < n; ++i){
        if(hsh1[s[i]] && hsh1[s[i]] != t[i]) return 0;
        if(hsh2[t[i]] && hsh2[t[i]] != s[i]) return 0;
        hsh1[s[i]] = t[i];
        hsh2[t[i]] = s[i];
    }return 1;
}

string largestOddNumber(string num) {
    int n = num.size();
    int len = 0;
    for (int i = n - 1; i >= 0; i--) {
        if ((num[i] - '0') % 2 == 1) {
            len = i+1;
            break;
        }
    }
    return num.substr(0,len);        
} 

string frequencySort(string s) {
    unordered_map<char,int> hsh;
    for(auto& ch : s){
        hsh[ch]++;
    }sort(s.begin(),s.end(),[&](char a,char b){
        if(hsh[a] == hsh[b]){
            return a < b;
        }else{
            return hsh[a] > hsh[b];
        }
    });
    return s;
}

int beautySum(string s) {
    int n = s.size();
    int ans = 0;
    for(int i = 0; i < n; ++i){
        unordered_map<char,int> hsh;
        for(int j = i; j < n; ++j){
            hsh[s[j]]++;
            int maxi = INT_MIN ,mini = INT_MAX;
            for(auto& pr : hsh){
                int f = pr.second;
                maxi = max(maxi ,f);
                mini = min(mini ,f);
            }ans += (maxi - mini);
            
        }
    }return ans;
} 

string removeOuterParentheses(string s) {
    int n = s.size();
    stack<char> st;
    string ans;
    for(auto& brac : s){
        if(brac == '('){
            if(!st.empty()){
                ans += brac;
            }
            st.push(brac);
        }else if(brac == ')'){
            st.pop();
            if(!st.empty()){
                ans += brac;
            }
        }
    }return ans;
}

string removeOuterParentheses(string s) {
    string res = "";
    int openCnt = 0;
    for(auto& brac : s){
        if(brac == '(' && openCnt++ > 0) res += brac;
        else if(brac == ')' && openCnt-- > 1)   res += brac;
    }
    return res;
}

int maxDepth(string s) {
    int n = s.size() ,maxi = 0;
    stack<char> st;
    for(auto& brac : s){
        if(brac == '('){
            st.push(brac);
            if(maxi < st.size()){
                maxi = st.size();
            }
        }else if(brac == ')'){
            st.pop();
        }
    }return maxi;
}

int maxDepth(string s) {
    int n = s.size() ,open = 0 ,maxi = 0;
    for(auto& ch : s){
        if(ch == '('){
            open++;
        }else if(ch == ')'){
            maxi = max(maxi,open--);
        }
    }return maxi;
} 

bool isValid(string s) {
    int n = s.size();
    stack<char> st;
    unordered_map<char,int> prec = {
        { '(' , 1  } , { ')' , -1 } ,
        { '{' , 2  } , { '}' , -2 } ,
        { '[' , 3  } , { ']' , -3 }
    };
    for(auto& brac : s){
        if(prec[brac] > 0){
            st.push(brac);
        }else{
            if(st.empty() || (prec[brac] + prec[st.top()])){
                return 0;
            }else{
                st.pop();
            }
        }
    }return st.empty();
} 

int minAddToMakeValid(string s) {
    stack<char> st;
    for(auto& ch : s){
        if(ch == '('){
            st.push(ch);
        }else{
            if(!st.empty() && st.top() == '(')   st.pop();
            else    st.push(ch);
        }
    }return st.size();
} 

int findMinimumCost(string s) {
    int n = s.size() ,a = 0 ,b = 0;
    if(n%2 != 0){
        return -1; 
    }
    stack<char> st;
    for(auto& brac : s){
        if(brac == '{'){
            st.push(brac);
        }else {
            if(brac == '}' && !st.empty() && st.top() == '{'){
                st.pop();
            }else{
                st.push(brac);
            }
        }
    }
    int sz = st.size();
    while(!st.empty()){
        if(st.top() == '{'){
            a++;
        }
        st.pop();
    }
    b = sz-a;
    return (a+1)/2 + (b+1)/2;
}


#include<bits/stdc++.h>
using namespace std;

int main(){
    
    vector<string> strs = {
        "aa",
        "ab",
        "aa",
        "b",
        "cc",
        "aa"
    };
    
    sort(strs.begin(),strs.end());
    
    int dist = 0 ,n = strs.size();
    for(int i = 0; i < n; ++i){
        if(i != 0 && strs[i] == strs[i-1]){
            continue;
        }
        dist++;
    }
    cout << dist << endl;
}



#include<bits/stdc++.h>
using namespace std;

int p = 27;
const int N = 1e5+3 ,m = 1e9+7;
vector<long long> pows(N);

long long calcHsh(string s){
    long long hsh = 0;
    int n = s.size();
    for(int i = 0; i < n; ++i){
        hsh += ((s[i]-'a'+1) * pows[i])%m;
    }
    return hsh;
}

int main(){
    
    pows[0] = 1;
    for(int i = 1; i < N; ++i){
        pows[i] = (pows[i-1] * p)%m;
    }
    
    vector<string> strs = {
        "aa",
        "ab",
        "aa",
        "b",
        "cc",
        "aa"
    };
    
    vector<long long> hshs;
    for(auto word : strs){
        hshs.push_back(calcHsh(word));
    }
    
    sort(hshs.begin(),hshs.end());
    
    int n = hshs.size() ,dist = 0;
    for(int i = 0; i < n; ++i){
        if(i != 0 && hshs[i] == hshs[i-1]){
            continue;
        }
        dist++;
    }
    cout << dist << endl;
} 

  
for(int i = 0; i < T-S+1; ++i){
    if(t.substr(i,S) == s){
        cout << i << endl;
    }
}


#include<bits/stdc++.h>
using namespace std;

vector<int> lps(string s){
    int n = s.size();
    vector<int> pfx(n,0);
    for(int i = 1; i < n; ++i){
        int j = pfx[i-1];
        while(j > 0 && s[i] != s[j]){
            j = pfx[j-1];
        }
        if(s[i] == s[j]){
            j++;
        }
        pfx[i] = j;
    }
    return pfx;
} 

int main(){
    
    string t = "na";
    string s = "apnacollege";
    vector<int> pfx = lps(s);
    
    int pos = -1;
    int i(0) ,j(0);
    int n = s.size() ,m = t.size();
    
    while(i < n && j < m){
        if(s[i] == t[j]){
            i++ ,j++;
        }
        else{
            if(j){
                j = pfx[j-1];
            }
            else{
                i++;
            }
        }
    }
    cout << i - m << endl;
}


#include<bits/stdc++.h>
using namespace std;

int p = 27;
const int N = 1e5+3 ,mod = 1e9+7;
vector<long long> pows(N);
 
int main(){
    
    string t = "na";
    string s = "apnacollege"; 
    
    int n = s.size();
    int m = t.size();
    
    pows[0] = 1;
    for(int i = 1; i < N; ++i){
        pows[i] = (pows[i-1] * p)%mod;
    }
    
    vector<long long> hshs(n+1,0);
    for(int i = 0; i < n; ++i){
        hshs[i+1] = (hshs[i] + (s[i]-'a'+1)*pows[i])%mod;
    }
    
    long long h_t = 0;
    for(int i = 0; i < m; ++i){
        h_t = (h_t + (t[i]-'a'+1)*pows[i])%mod;
    }
    
    for(int i = 0; i < n-m+1; ++i){
        long long cur_h = (hshs[i+m]-hshs[i]+mod)%mod;
        if(cur_h == (h_t*pows[i])%mod){
            cout << i << endl;
        }
    }
}


string longestPrefix(string s) {
	int n=s.length();
	vector<int> kmp(n);
	int i=1,j=0;
	while(i<n) {
		if(s[i]==s[j]) {
			kmp[i++]=++j;
		}
		else {
			if(j) j=kmp[j-1];
			else i++;
		}
	}
	return s.substr(0,kmp[n-1]);
}


int p = 31;
const int N = 1e5+3 ,m = 1e9+7;
long long pows[N];

class Solution {
public:
    string longestPrefix(string s) {
        
        pows[0] = 1;
        for(int i = 1; i < N; ++i){
            pows[i] = (pows[i-1]*p)%m;
        }

        int n = s.size();
        long long h_p = 0 ,h_s = 0;
        int j = 0 ,i;
        for(i = 0; i < n-1; ++i){
            if(h_p == h_s)  break;
            h_p = (h_p + (s[i]-'a'+1)*pows[n-1-i])%m;
            h_s = (h_s + (s[n-1-i]-'a'+1)*pows[i])%m;
        }return s.substr(0,i);

    }
};


class Solution {

    void findLps(string needle,vector<int>& lps){
        int n = needle.size();
        int pre = 0 ,suf = 1;
        while(suf < n){
            if(needle[pre] == needle[suf]){
                lps[suf++] = ++pre;
            }else{
                if(!pre){
                    lps[suf++] = 0;
                }else{
                    pre = lps[--pre];
                }
            }
        }return;
    }

    bool KMP_MATCH(string haystack,string needle){
        int n = haystack.size() ,m = needle.size();
        vector<int> lps(m,0);
        findLps(needle,lps);
        int fst = 0 ,snd = 0;
        while(fst < n && snd < m){
            if(haystack[fst] == haystack[snd]){
                fst++;
                snd++;
                if(snd == m){
                    return 1;
                }
            }else{
                if(!snd){
                    fst++;
                }else{
                    snd = lps[snd-1];
                }
            }
        }return 0;
    }
public:
    int repeatedStringMatch(string a, string b) {
        
        if(a == b){
            return 1;
        }

        int rept = 1;
        string temp = a;
        int m = b.size();
        while(temp.size() < m){
            temp += a;
            rept++;
        }if(KMP_MATCH(temp,b) == 1){
            return rept;
        }else if(KMP_MATCH(temp+a,b) == 1){
            return rept+1;
        }else{
            return -1;
        }
    }
};

 
bool rotateString(string s, string goal) {
    int n = s.size();
    int m = goal.size();
    if(n != m){
        return 0;
    }string conc = goal + goal;
    return conc.find(s) != -1;
}


class Solution {
public:
void computelps(vector<int>&lps,string s,int m)
{
    int len=0,i=1;
    while(i<m)
    {
        if(s[len]==s[i])
        {
            len++;
            lps[i]=len;
            i++;
        }
        else
        {
            if(len!=0) len=lps[len-1];
            else
            {
                lps[i]=0;
                i++;
            }
        }
    }
}
    string shortestPalindrome(string s) {
      int n=s.size();
      string ans=s;
      s+='#';

        for(int i=n-1;i>=0;i--)
        {
            s+=s[i];
        }
        vector<int>lps(2*n+2,0);
        computelps(lps,s,n+n+1);
        string temp="";
        for(int i=n-1;i>=lps[2*n];i--)
        {
            temp+=s[i];
        }
        return temp+ans;
    }
};