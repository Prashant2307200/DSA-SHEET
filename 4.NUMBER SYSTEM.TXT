int reverse(int x) {
    int rev = 0;
    int n = x;
    while(n){
        int ld = n%10;
        if(rev > INT_MAX/10 || rev < INT_MIN/10) return 0;
        rev = rev*10 + ld;
        n /= 10;
    }return rev;
} 

int addDigits(int num) {
    int n = num;
    int ans = 0;
    while(n > 9){
        while(n){
            int lastDigit = n%10;
            ans += lastDigit;
            n /= 10;
        }n = ans;
        ans = 0;
    }return n;
} 

string armstrongNumber(int n) {
    int original = n ,sum = 0;
    int digits = (int)log10(n);
    while (n != 0) {
        int lstDig = n%10;
        sum += pow(lstDig, digits);
        n /= 10;
    }
    return (sum == original) ? "YES" : "NO";
}

int decimalToBinary(int n) {
    int x = 1;
    int ans = 0;
    while (n != 0) {
        int lastDigit = n%2;
        ans += lastDigit*x;
        x *= 10;
        n /= 2;
    }
    return ans;
}

int binaryToDecimal(int n){
    int ans = 0 ,x = 1;
    while(n){
        int lastDigit = n%10;
        ans += lastDigit*x;
        n /= 10;
        x *= 2;
    }return ans;
}

int decimalToOctal(int n){
    int ans = 0 ,x = 1;
    while(n){
        int lastDigit = n%8;
        ans += lastDigit*x;
        n /= 8;
        x *= 10;
    }return ans;
}

int octalToDecimal(int n){
    int ans = 0 ,x = 1;
    while(n){
        int lastDigit = n%10;
        ans += lastDigit*x;
        n /= 10;
        x *= 8;
    }return ans;
}

int hexadecimalToDecimal(string s){
    int ans = 0 ,x = 1 ,n = s.size() ,i = 0;
    while(i < n){
        int lastDigit = s[n-1-i];
        if(lastDigit >= '0' && lastDigit <= '9'){
            ans += (lastDigit-'0')*x;
        }else{
            ans += (lastDigit-'A'+10)*x;
        }x *= 16;
        ++i;
    }return ans;
}

string decimalToHexadecimal(int n){
    int x = 1;
    string ans = "";
    while(n){
        int lastDigit = n%16;
        if(lastDigit >= 0 && lastDigit <= 9){
            ans = to_string(lastDigit) + ans;
        }else{
            ans = (char)('A'+lastDigit-10) + ans;
        }n /= 16;
        x *= 10;
    }return ans;
}

class Solution {
    int num(char ch){
        if(ch == 'I')       return 1;
        else if(ch == 'V')  return 5;
        else if(ch == 'X')  return 10;
        else if(ch == 'L')  return 50;
        else if(ch == 'C')  return 100;
        else if(ch == 'D')  return 500;
        else                return 1000;
    }
public:
    int romanToInt(string s) {
        int ans = 0;
        int n = s.size();
        for(int i = 1; i < n; ++i){
            if(num(s[i]) > num(s[i-1])){
                ans -= num(s[i-1]);
            }else{
                ans += num(s[i-1]);
            }
        }ans += num(s[n-1]);
        return ans;
    }
};

class Solution {
    pair<string,int> roman(int n){
        if     (n >= 1000)  return {"M",1000};
        else if(n >= 900)   return {"CM",900};
        else if(n >= 500)   return {"D",500};
        else if(n >= 400)   return {"CD",400};
        else if(n >= 100)   return {"C",100};
        else if(n >= 90)    return {"XC",90};
        else if(n >= 50)    return {"L",50};
        else if(n >= 40)    return {"XL",40};
        else if(n >= 10)    return {"X",10};
        else if(n >= 9)     return {"IX",9};
        else if(n  >= 5)     return {"V",5};
        else if(n >= 4)     return {"IV",4};
        return {"I",1};
    }
public:
    string intToRoman(int num) {
        int n = num;
        string ans;
        while(n){
            auto pr = roman(n);
            ans += pr.first;
            n -= pr.second;
        }return ans;
    }
};

int myAtoi(string s) {
    int len = s.size();
    double num = 0;
    int i=0;
    while(s[i] == ' '){i++;}
    bool positive = s[i] == '+';
    bool negative = s[i] == '-';
    positive == true ? i++ : i;
    negative == true ? i++ : i;
    while(i < len && s[i] >= '0' && s[i] <= '9'){
        num = num*10 + (s[i++]-'0');
    }num = negative ? -num : num;
    num = (num > INT_MAX) ? INT_MAX : num;
    num = (num < INT_MIN) ? INT_MIN : num;
    return int(num);
}

string addStrings(string nums1, string nums2) {
    int n1 = nums1.size() ,n2 = nums2.size();
    int i = n1-1 ,j = n2-1;
    int carry = 0;
    string ans = "";
    while( i >= 0 || j >= 0 || carry ){
        if(i >= 0){
            carry += nums1[i--] - '0';
        }if(j >= 0){
            carry += nums2[j--] - '0';
        }ans = to_string(carry%10) + ans;
        carry /= 10;
    }return ans;
}

string addBinary(string a, string b) {
    string ans = "";
    int i = a.length()-1;
    int j = b.length()-1;
    int carry = 0;
    while(i >= 0 || j >= 0 || carry){
        if(i >= 0){
            carry += a[i--]-'0';
        }if(j >= 0){
            carry += b[j--]-'0';
        }ans += carry%2+'0';
        carry /= 2;
    }reverse(ans.begin(),ans.end());
    return ans;
}

string multiply(string num1, string num2) {
    if (num1 == "0" || num2 == "0") return "0";
    vector<int> res(num1.size()+num2.size(), 0);
    for (int i = num1.size()-1; i >= 0; i--) {
        for (int j = num2.size()-1; j >= 0; j--) {
            res[i + j + 1] += (num1[i]-'0') * (num2[j]-'0');
            res[i + j] += res[i + j + 1] / 10;
            res[i + j + 1] %= 10;
        }
    }int i = 0;
    string ans = "";
    while (res[i] == 0) i++;
    while (i < res.size()) ans += to_string(res[i++]);
    return ans;
}