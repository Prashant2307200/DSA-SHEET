int search(vector<int>& nums, int target) {
    int n = nums.size();
    for(int i = 0; i < n; ++i){
        if(nums[i] == target){
            return i;
        }                                                         
    }
    return -1;
}

int search(vector<int>& nums, int target) {
    int n = nums.size();
    int s = 0 ,e = n-1;
    while(s <= e){
        int mid = s + (e-s)/2;
        int num = nums[mid];
        if(num > target){
            e = mid - 1;
        }
        else if(num < target){
            s = mid + 1;
        }
        else{
            return mid;
        }
    }
    return -1;
}

int* ptr = lower_bound(arr.begin(), arr.end(),x);
int lowerBound(vector<int> arr, int n, int x) {
	int s = 0 , e = n - 1;
	while(s <= e){
		int mid = s + (e-s)/2;
		int num = arr[mid];
		if(num < x){
			s = mid + 1;
		}
		else{
			e = mid - 1;
		}
	}
	return s;
}

auto it = s.upper_bound(s.begin(),s.end(),rand());
int upperBound(vector<int> &arr, int x, int n){
	int s = 0 , e = n - 1;
	while(s <= e){
		int mid = s + (e-s)/2;
		int num = arr[mid];
		if(num <= x){
			s = mid + 1;
		}
		else{
			e = mid - 1;
		}
	}
	return s;
}

pair<int, int> getFloorAndCeil(vector<int> &a, int n, int x) {
    int s = 0 ,e = n-1 ,ansFloor = -1 ,ansCeil = -1;
    while(s <= e){
        int mid = ((s+e)>>1);
        if(a[mid] == x){
          ansCeil = mid;
          ansFloor = mid;
          break;
        }
        else if(a[mid] > x){
            ansFloor = mid;
            e = mid-1;
        }
        else{
            ansCeil = mid;
            s = mid+1;
        }
    }
    return { ansCeil == -1?-1:a[ansCeil],ansFloor == -1?-1:a[ansFloor] };
}

class Solution {
    int findFstOcc(vector<int>& nums,int s ,int e ,int target){
        int ans = -1;
        while(s <= e){
            int mid = s + (e-s)/2;
            int num = nums[mid];
            if(num == target){
                ans = mid;
                e = mid - 1;
            }
            else if(num > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }
        return ans;
    }
    int findLstOcc(vector<int>& nums,int s ,int e ,int target){
        int ans = -1;
        while(s <= e){
            int mid = s + (e-s)/2;
            int num = nums[mid];
            if(num == target){
                ans = mid;
                s = mid + 1;
            }
            else if(num > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }
        return ans;
    }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int fstOcc = findFstOcc(nums ,0 , n-1 , target);
        int lstOcc = findLstOcc(nums ,0 , n-1 , target);
        return { fstOcc , lstOcc };
    }
};

int search(vector<int>& nums, int target) {
    int n = nums.size();
    int s = 0 , e = n - 1;
    while(s <= e){
        int mid = s + (e-s)/2;
        int num = nums[mid];
        if(num == target){
            return mid;
        }
        else if(nums[s] <= nums[mid]){
            if(nums[s] <= target && target <= nums[mid]){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }
        else{
            if(nums[mid+1] <= target && target <= nums[e]){
                s = mid + 1;
            }
            else{
                e = mid - 1;
            }
        }
    }
    return -1;
}

class Solution {
    int bs(vector<int>& nums,int target,int s,int e){
        while(s <= e){
            int mid = s + (e-s)/2;
            int num = nums[mid];
            if(num == target){
                return  mid;
            }
            else if(num > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }
        return -1;
    }
    int pivot(vector<int>& nums){
        int s = 0 , e = nums.size() - 1;
        while(s <= e){
            int mid = s + (e-s)/2;
            int num = nums[mid];
            if(nums[0] <= num){
                s = mid + 1;
            }
            else{
                e = mid - 1;
            }
        }
        return s;
    }
public:
    int search(vector<int>& nums, int target) {
        int pi = pivot(nums);
        int e = nums.size() - 1;
        if(nums[0] <= target && target <= nums[pi-1]){
            return bs(nums,target,0,pi-1);
        }
        else{
            return bs(nums,target,pi,e);
        }
    }
};

bool search(vector<int>& nums, int target) {
    int s = 0 ,e = nums.size()-1;
    while(s <= e){
        int mid = ((s+e)>>1);
        if(nums[mid] == target){
            return 1;
        }
        else if(nums[mid] == nums[e] && nums[mid] == nums[s]){
            s++ ,e--;
            continue;
        }
        else if(nums[s] <= nums[mid]){
            if(nums[s] <= target && nums[mid] >= target){
                e = mid-1;
            }else{
                s = mid+1;
            }
        }
        else{
            if(nums[mid] <= target && nums[e] >= target){
                s = mid+1;
            }else{
                e = mid-1;
            }
        }
    }
    return 0;
}

int s = 0 ,e = n-1 , ans = 0;
while (s <= e) {
    int mid = ((s + e) >> 1);
    if (arr[mid] >= arr[0]){
        s = mid+1;
    }else{
        ans = mid;
        e = mid-1;
    }
}return ans;

int s = 0 ,e = n-1 ,ans = nums[0];
while(s <= e){
    int mid = ((s+e)>>1);
    if(nums[s] <= nums[mid]){
        ans = min(ans,nums[s]);
        s = mid+1;
    }else{
        ans = min(ans,nums[mid]);
        e = mid-1;
    }
}return ans;

int s = 0 ,e = n-1 ,ans = -1;
while(s <= e){
    int mid = ((s+e)>>1);
    if(mid+1 != n && nums[mid] == nums[mid^1]){
        s = mid+1;
    }else{
        ans = nums[mid];
        e = mid-1;
    }
}return ans;

int s = 0 ,e = n-1 ,ans = n-1;
while(s <= e){
    int mid =((s+e)>>1);
    if(mid != n-1 && nums[mid] < nums[mid+1])
        s = mid+1;
    else 
        ans = mid ,e = mid-1;
}return ans;

long long s = 1 ,e = n;
while(s <= e){
    long long mid = (s+e)/2;
    if(mid*mid > n) e = mid-1;
    else    s = mid+1;
}
return e;

class Solution {
    long long findHours(vector<int>& piles,int k){
        long long hours = 0;
        int n = piles.size();
        for(int i = 0; i < n; ++i){
            hours += (piles[i]/k) + (piles[i]%k != 0);
        }
        return hours;
    }
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int low = 1 ,high = *max_element(piles.begin(),piles.end());
        while(low <= high){
            int mid = ((low+high)>>1);
            long long totalH = findHours(piles,mid);
            if(totalH <= h){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return low;
    }
};

class Solution {
    int find(vector<int>& bloomDay,int k,int maxDay){
        int noOfBucket = 0;
        int n = bloomDay.size();
        int cnt = 0;
        for(int i = 0; i < n; ++i){
            if(bloomDay[i] <= maxDay){
                cnt++;
            }
            else{
                noOfBucket += (cnt/k);
                cnt = 0;
            }
        }
        return noOfBucket += (cnt/k);
    }
public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        long long totalLen = m * 1LL * k;
        int n = bloomDay.size();
        if(n < totalLen){
            return -1;
        }
        int low = *min_element(bloomDay.begin(),bloomDay.end());
        int high = *max_element(bloomDay.begin(),bloomDay.end());
        while(low <= high){
            int mid = ((low+high)>>1);
            int buckets = find(bloomDay,k,mid);
            if(buckets >= m){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return low;
    }
};

class Solution {
    int find(vector<int>& nums,int div){
        int n = nums.size();
        int sum = 0;
        for(int i = 0; i < n; ++i){
            sum += ceil(nums[i]*1.0/div);
        }
        return sum;
    }
public:
    int smallestDivisor(vector<int>& nums, int threshold) {
        if(nums.size() > threshold){
            return -1;
        }
        int low = 1 ,high = *max_element(nums.begin(),nums.end());
        while(low <= high){
            int mid = ((low+high)>>1);
            int ans = find(nums,mid);
            if(ans <= threshold){
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return low;
    }
};

class Solution {
    int find(vector<int>& weights,int maxCap){
        int day = 1 ,load = 0 ,n = weights.size();
        for(int i = 0; i < n; ++i){
            if(weights[i] + load > maxCap){
                day++;
                load = weights[i];
            }
            else{
                load += weights[i];
            }
        }
        return day;
    }
public:
    int shipWithinDays(vector<int>& weights, int days) {
        int low = *max_element(weights.begin(),weights.end());
        int high = accumulate(weights.begin(),weights.end(),0);
        while(low <= high){
            int mid = ((low+high)>>1);
            int reqDays = find(weights,mid);
            if(reqDays <= days){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        return low;
    }
};

for(int i = 0; i < n && arr[i] <= k++; ++i);
 
int low = 0 ,high = n-1;
while(low <= high){
    int mid = ((low+high)>>1);
    int miss = arr[mid]-(mid+1);
    if(miss < k){
        low = mid+1;
    }
    else{
        high = mid-1;
    }
}
return low + k;

bool isFeas(vector<int> &stalls,int cowsCnt,int minDist){
    int cnt = 1 ,pos = stalls[0] ,n = stalls.size();
    for(int i = 1; i < n; ++i){
        if(stalls[i] - pos >= minDist){
            cnt++;
            pos = stalls[i];
            if(cnt == cowsCnt) break;
        }
    }
    return cnt >= cowsCnt;
}
int aggressiveCows(vector<int> &stalls, int k){
    sort(stalls.begin(),stalls.end());
    int n = stalls.size();
    int s = 1 ,e = stalls[n-1]-stalls[0];
    int ans = -1;
    while(s <= e){
        int mid = ((s+e)>>1);
        if(isFeas(stalls,k,mid)){
            ans = mid;
            s = mid+1;
        }else{
            e = mid-1;
        }
    }
    return ans;
}

bool isPossible(vector<int> arr, int n, int m, int maxPage){
    int studentCount = 1 ,pageSum = 0;
    for (int i = 0; i < n; i++) {
        if (pageSum + arr[i] > maxPage){
            pageSum = 0;
            studentCount++;
            if(studentCount > m)    break;
        }
        pageSum += arr[i];
    }
    return studentCount <= m;
}
int findPages(vector<int> arr, int n, int m){
    if (n < m) {
        return -1;
    }
    int s = *max_element(arr.begin(),arr.end());
    int e = accumulate(arr.begin(),arr.end(),0);
    while (s <= e){
        int mid = (s+e)/2;
        if (isPossible(arr, n, m, mid)){
            e = mid - 1;
        }
        else{
            s = mid + 1;
        }
    }return s;
}

int isFeasable(int maxTime,vector<int> &boards){
    int painters=1,sum=0;
    for(int i=0;i<boards.size();i++){
        if(sum+boards[i] > maxTime){
            painters++;
            sum=0;
        }
        sum+=boards[i];
    }
    return painters;
}
int findLargestMinDistance(vector<int> &boards, int k){
    int e = accumulate(boards.begin(),boards.end(),0);
    int s = *max_element(boards.begin(),boards.end());
    while(s<e){
        int mid=s+(e-s)/2;
        int painters=isFeasable(mid,boards);
        if(painters<=k){
            e=mid;
        }
        else{
            s=mid+1;
        }
    }
    return s; 
}

class Solution {
    int isFeas(vector<int>& nums,int k,int maxSum){
        int division = 1,sum = 0,n = nums.size();
        for(int i = 0; i < n; ++i){
            int num = nums[i];
            if(num > maxSum){
                return 0;
            }
            if(sum + num > maxSum){
                sum = 0;
                division++;
                if(division > k){
                    break;
                }
            }
            sum += num;
        }
        return division <= k;
    }
public:
    int splitArray(vector<int>& nums, int k) { 
        int s = *max_element(nums.begin(),nums.end());
        int e = accumulate(nums.begin(),nums.end(),0);
        while(s <= e){
            int mid = s + (e-s)/2;
            if(isFeas(nums,k,mid)){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }
        return s;
    }
};

double minimiseMaxDistance(vector<int> &arr, int k){
	int n = arr.size();
	vector<int> isPlace(n-1,0);
	for(int gasStations = 1; gasStations <= k; ++gasStations){
		long double maxSecLen = -1;
		int maxIdx = -1;
		for(int i = 0; i < n-1; ++i){
			long double diff = (arr[i+1]-arr[i]);
			long double secLen = diff/((long double)isPlace[i]+1);
			if(secLen > maxSecLen){
				maxSecLen = secLen;
				maxIdx = i;
			}
		}
        isPlace[maxIdx]++;
	}
    long double maxAns = -1;
	for(int i = 0; i < n-1; ++i){
		long double diff = arr[i+1]-arr[i];
		long double secLen = diff/((long double)1+isPlace[i]);
		maxAns = max(maxAns,secLen);
	}
    return maxAns;
}

double minimiseMaxDistance(vector<int> &arr, int k){
	int n = arr.size();
	vector<int> isPlace(n-1,0);
	priority_queue<pair<long double ,int>> pq;
	for(int i = 0; i < n-1; ++i){
		pq.push({ arr[i+1]-arr[i] ,i });
	}
    for(int gasStations = 1; gasStations <= k; ++gasStations){
		auto tp = pq.top();
		pq.pop();
		int secIdx = tp.second;
		isPlace[secIdx]++;
		long double iniDiff = arr[secIdx+1]-arr[secIdx];
		long double newSecLen = iniDiff/((long double)1+isPlace[secIdx]);
		pq.push({ newSecLen ,secIdx });
	}
    return pq.top().first;
}

int noOfReqGasStation(vector<int> &arr,long double maxDist){
	int cnt = 0 ,n = arr.size();
	for(int i = 1; i < n; ++i){
		int noInBw = (arr[i]-arr[i-1])/maxDist;
		if((arr[i]-arr[i-1]) == noInBw*maxDist){
			noInBw--;
		}
        cnt += noInBw;
	}
    return cnt;
}
double minimiseMaxDistance(vector<int> &arr, int k){
	int n = arr.size();
	long double low = 0 ,high = 0;
	for(int i = 0; i < n-1; ++i){
		high = max(high,(long double)arr[i+1]-arr[i]);
	}
    long double diff = 1e-6;
	while(high-low > diff){
		long double mid = (high+low)/2.0;
		int cnt = noOfReqGasStation(arr,mid);
		if(cnt > k){
			low = mid;
		}else{
			high = mid;
		}
	}
    return high;
}

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int i =  0 ,j = 0; 
    int n = nums1.size() ,m = nums2. size() ,k = 0;
    vector<int> nums(n+m);
    while(i < n || j < m){
        if(i < n && j < m){
            if(nums1[i] < nums2[j]){
                nums[k++] = nums1[i++];
            }
            else{
                nums[k++] = nums2[j++];
            }
        }
        else if(i < n){
            nums[k++] = nums1[i++];
        }
        else if(j < m){
            nums[k++] = nums2[j++];
        }
    }
    if(k%2 == 1){
        return nums[k/2];
    }
    else{
        return (nums[k/2] + nums[k/2 - 1])/2.0;
    }
}

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int i =  0 ,j = 0;
    int n = nums1.size() ,m = nums2. size() ,k = 0;
    int idx1elm = -1 ,idx2elm = -1;
    int idx2 = (n+m)/2;
    int idx1 = idx2-1;
    while(i < n || j < m){
        if(i < n && j < m){
            if(nums1[i] < nums2[j]){
                if(k == idx1)  idx1elm = nums1[i];
                if(k == idx2)  idx2elm = nums1[i];
                i++; 
            }
            else{
                if(k == idx1)  idx1elm = nums2[j];
                if(k == idx2)  idx2elm = nums2[j];
                j++;
            }
        }
        else if(i < n){
            if(k == idx1)  idx1elm = nums1[i];
            if(k == idx2)  idx2elm = nums1[i];
            i++;
        }
        else if(j < m){
            if(k == idx1)  idx1elm = nums2[j];
            if(k == idx2)  idx2elm = nums2[j];
            j++;
        }
        k++;
    }
    if(k%2 == 1){
        return idx2elm;
    }
    else{
        return (idx1elm + idx2elm)/2.0;
    }
}

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int n1 = nums1.size() ,n2 = nums2.size();
    int n = n1+n2+1;
    if(n1 > n2) return findMedianSortedArrays(nums2,nums1);
    int low = 0 ,high = n1;
    while(low <= high){
        int P1 = (low+high)/2;
        int P2 = n/2 - P1;
        int x1 = P1 == 0  ? INT_MIN : nums1[P1-1];
        int x2 = P2 == 0  ? INT_MIN : nums2[P2-1];
        int x3 = P1 == n1 ? INT_MAX : nums1[P1];
        int x4 = P2 == n2 ? INT_MAX : nums2[P2];
        if(x1 <= x4 && x2 <= x3){
            if((n1+n2)%2 == 1){
                return max(x1,x2);
            }   
            else{
                return (max(x1,x2)+min(x3,x4))/2.0;
            }
        }
        else if(x1 > x4){
            high = P1-1;
        }
        else{
            low = P1+1;
        }
    }return -1;
}

int kthElement(vector<int> &nums1, vector<int>& nums2, int n1, int n2, int k){
    if(n1 > n2) return kthElement(nums2,nums1,n2,n1,k);
    int low = max(0,k-n2) ,high = min(k,n1);
    while(low <= high){
        int P1 = (low+high)/2;
        int P2 = k - P1;
        int x1 = P1 == 0  ? INT_MIN : nums1[P1-1];
        int x2 = P2 == 0  ? INT_MIN : nums2[P2-1];
        int x3 = P1 == n1 ? INT_MAX : nums1[P1];
        int x4 = P2 == n2 ? INT_MAX : nums2[P2];
        if(x1 <= x4 && x2 <= x3){
            return max(x1,x2);
        }
        else if(x1 > x4){
            high = P1-1;
        }
        else{
            low = P1+1;
        }
    }
    return -1;
}

int n = matrix.size() ,m = matrix[0].size();
for(int i = 0; i < n; ++i){
    for(int j = 0; j < m; ++j){
        if(matrix[i][j] == target){
            return 1;
        } 
    }
}return 0;

bool searchMatrix(vector<vector<int>>& matrix, int target) {    
    int n = matrix.size() ,m = matrix[0].size();
    int lowy = 0 ,highy = n-1;
    int lowx = 0 ,highx = m-1;
    while(lowy <= highy){
        int midy = (lowy+highy)/2;
        if(matrix[midy][0] <= target && target <= matrix[midy][m-1]){
            while(lowx <= highx){
                int midx = (lowx+highx)/2;
                if(matrix[midy][midx] == target){
                    return 1;
                }
                else if(matrix[midy][midx] > target){
                    highx = midx-1;
                }
                else{
                    lowx = midx+1;
                }
            }
            return 0;
        }
        else if(matrix[midy][0] > target){
            highy = midy-1;
        }
        else{
            lowy = midy+1;
        }
    }
    return 0;
}

bool searchMatrix(vector<vector<int>>& matrix, int target) {
    int n = matrix.size() ,m = matrix[0].size();
    int row = 0 ,col = m-1;
    while(row < n && col >= 0){
        if(matrix[row][col] == target){
            return 1;
        }else if(matrix[row][col] > target){
            col--;
        }else{
            row++;
        }
    }return 0;
}

int rowWithMax1s(vector<vector<int>> &matrix, int n, int m){
    int maxCnt = 0 ,idx = -1;
    for(int i = 0; i < n; ++i){
        int cnt = 0;
        for(int j = 0; j < m; ++j){
            cnt += matrix[i][j];
            if(cnt > maxCnt){
                maxCnt = cnt;
                idx = i;
            }
        }
    }
    return idx;
}

int rowWithMax1s(vector<vector<int>> &matrix, int n, int m){
    int maxCnt = 0 ,idx = -1;
    for(int i = 0; i < n; ++i){
        int low = 0 ,high = m-1;
        while(low <= high){
            int mid = (low+high)/2;
            if(matrix[i][mid] == 1){
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
        int cnt = m-low;
        if(cnt > maxCnt){
            maxCnt = cnt;
            idx = i;
        }
    }
    return idx;
}

class Solution {
    int findMaxIdx(vector<vector<int>>& mat,int n,int m,int col){
        int maxVal = -1 ,maxIdx = -1;
        for(int i = 0; i < n; ++i){
            if(mat[i][col] > maxVal){
                maxVal = mat[i][col];
                maxIdx = i;
            }
        }
        return maxIdx;
    }
public:
    vector<int> findPeakGrid(vector<vector<int>>& mat) {
        int n = mat.size() ,m = mat[0].size();
        int low = 0 ,high = m-1;
        while(low <= high){
            int col = (low+high)/2;
            int maxRowIdx = findMaxIdx(mat,n,m,col);
            int left = col-1 >= 0? mat[maxRowIdx][col-1] : -1;
            int right = col+1 < m? mat[maxRowIdx][col+1] : -1;
            if(mat[maxRowIdx][col] > left && mat[maxRowIdx][col] > right){
                return {maxRowIdx,col};
            }
            else if(mat[maxRowIdx][col] < left){
                high = col-1;
            }
            else{
                low = col+1;
            }
        }
        return {-1,-1};
    }
};

int median(vector<vector<int>> &matrix, int n, int m) {
    vector<int> v;
    for(auto& arr : matrix){
        for(auto& elm : arr){
            v.push_back(elm);
        }
    }
    sort(v.begin(),v.end());
    return v[(n*m)/2];
}

int countSmallerThanMid(vector<int> &row, int midian){
    int low = 0, high = row.size() - 1;
    while (low <= high){
        int mid = (l + h) >> 1;
        if (row[mid] <= midian){
            low = mid + 1;
        }
        else{
            high = mid - 1;
        }
  }
  return low;
}
int findMedian(vector<vector<int>> &A){
    int low = *min_element(A.begin(),a.end());
    int high = *max_element(A.begin(),a.end());
    int n = A.size() ,m = A[0].size();
    while (low <= high){
        int mid = (low + high) >> 1;
        int cnt = 0;
        for (int i = 0; i < n; i++){
            cnt += countSmallerThanMid(A[i], mid);
        }
        if (cnt <= (n * m) / 2)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return low;
}
